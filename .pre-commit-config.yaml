# Run `pre-commit install` once, then hooks run on each commit.
# Update hook versions with: pre-commit autoupdate
repos:
  # Ruff: lint + format (run linter first so fixes get reformatted)
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.12.12
    hooks:
      - id: ruff-check
        args: [--fix]        # apply safe autofixes
      - id: ruff-format

  # Type checking with pyright
  - repo: https://github.com/RobertCraigie/pyright-python
    rev: v1.1.405
    hooks:
      - id: pyright
        additional_dependencies: ["bibtexparser>=2.0.0b8,<3.0.0", "pytest>=8.3", "msgspec>=0.18.0"]  # Match pyproject.toml versions
        args: ["--project", "."]  # Explicitly use local pyrightconfig.json

  # Validate your JSON against schemas (e.g., identifier_collection)
  - repo: https://github.com/python-jsonschema/check-jsonschema
    rev: 0.33.3
    hooks:
      - id: check-jsonschema
        name: Validate identifier_collection.json
        files: ^data/identifier_collection\.json$
        args:
          - --schemafile
          - data/identifier_collection.schema.json

  # Tests and custom validation (run after linting/formatting but before complex validation)
  - repo: local
    hooks:
      # Run tests to ensure all functionality works before validating data files
      - id: pytest
        name: Run pytest
        entry: uv
        args: ["run", "python", "-m", "pytest", "tests/", "-v"]
        language: system
        pass_filenames: false
        files: ^(src/.*\.py|tests/.*\.py|pyproject\.toml)$

      - id: validate-citekey-consistency
        name: Validate citekey consistency and labels
        entry: uv
        args: ["run", "blx", "validate"]
        language: system
        files: ^(bib/library\.bib|data/add_order\.json|data/identifier_collection\.json)$
        pass_filenames: false

      # Direct biber validation of .bib file integrity
      - id: biber-validate-bib
        name: Validate library.bib with biber --tool
        entry: biber
        args: ["--tool", "--validate-datamodel", "--output-directory", "bib/generated", "bib/library.bib"]
        language: system
        files: ^bib/library\.bib$
        pass_filenames: false

      # Post-commit cleanup of staging backups
      - id: cleanup-staging-backups
        name: Clean up staging backup directories
        entry: powershell
        args: ["-Command", "if (Test-Path 'staging/backup-*') { Write-Host 'Cleaning up staging backup directories...'; Remove-Item 'staging/backup-*' -Recurse -Force; Write-Host 'âœ“ Staging backup cleanup completed' } else { Write-Host 'No staging backup directories to clean up' }"]
        language: system
        stages: [post-commit]
        always_run: true
        pass_filenames: false

  # Small hygiene checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v6.0.0
    hooks:
      - id: end-of-file-fixer
      - id: trailing-whitespace
      - id: check-yaml
      - id: check-toml
      - id: check-json
        exclude: |
          (?x)(
            ^\.vscode/settings\.json$|
            ^pyrightconfig\.json$
          )

# Skip common build/virtualenv dirs and LaTeX outputs
exclude: |
  (?x)(
    ^\.venv/|
    ^build/|
    ^dist/|
    ^.+\.pdf$|
    ^.+\.aux$|
    ^.+\.bbl$|
    ^.+\.bcf$|
    ^.+\.blg$|
    ^.+\.fdb_latexmk$|
    ^.+\.fls$|
    ^.+\.log$|
    ^.+\.out$|
    ^.+\.run\.xml$|
    ^.+\.synctex\.gz$|
    ^latex/.+/(build|out)/|
    ^examples/.+/(build|out)/
  )

# Configure default hook types to include post-commit hooks
default_install_hook_types: [pre-commit, post-commit]
